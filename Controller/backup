# Biblioteca para o Coppelia (versão nova com ZMQ API)
from coppeliasim_zmqremoteapi_client import RemoteAPIClient
import numpy as np
import matplotlib.pyplot as plt
import time

# Variveis globais de conexão
client = None
sim = None
simIK = None
ikEnv = None
ikGroup_undamped = None
ikGroup_damped = None

# Variáveis globais
handleRobotOmni = None
handlePads = []
handleRobotUR5 = None
handleJointUR5 = []
tip = None
target = None

def conectar():
    global client, sim, simIK
    client = RemoteAPIClient()
    sim = client.require('sim')
    simIK = client.require('simIK')

def configurarIK():
    global ikEnv, ikGroup_undamped, ikGroup_damped

    # 1. Cria o ambiente IK
    ikEnv = simIK.createEnvironment()
    print("Ambiente IK criado.")

    ikGroup_undamped = simIK.createGroup(ikEnv)
    simIK.setGroupCalculation(ikEnv, ikGroup_undamped, simIK.method_pseudo_inverse, 0, 6)
    
    simIK.addElementFromScene(ikEnv, ikGroup_undamped, handleRobotUR5, tip, target, simIK.constraint_pose)
    print("Grupo IK não amortecido configurado (pseudo-inversa).")

    ikGroup_damped = simIK.createGroup(ikEnv)
    simIK.setGroupCalculation(ikEnv, ikGroup_damped, simIK.method_damped_least_squares, 1, 99)
    simIK.addElementFromScene(ikEnv, ikGroup_damped, handleRobotUR5, tip, target, simIK.constraint_pose)
    print("Grupo IK amortecido configurado (damped least squares).")


def obterHandles():
    global handleRobotOmni, handleRobotUR5, handlePads, handleJointUR5, tip, target

    #handleRobotOmni = sim.getObject('/OmniPlatform')
    #print(f"Robo Omni: {handleRobotOmni}")

    # Obter as juntas do Omni
    #for i in range(4):
    #    junta = sim.getObject(f'/OmniPlatform/regularRotation{i + 1}')
    #    handlePads.append(junta)

    handleRobotUR5 = sim.getObject('/UR5')
    print(f"Robo UR5: {handleRobotUR5}")

    # Obter as juntas do UR5
    for i in range(6):
        junta = sim.getObject(f'/UR5/jointUR{i + 1}')
        handleJointUR5.append(junta)
    
    # Obter o Tip e target
    tip = sim.getObject("/UR5/RG2/Tip")
    target = sim.getObject("/Target")

# Controlar o OmniPlataform
def irparaFT(v):
    # V positivo Frente, -v Tras
    sim.setJointTargetVelocity(handlePads[0], v)
    sim.setJointTargetVelocity(handlePads[1], v)
    sim.setJointTargetVelocity(handlePads[2], v)
    sim.setJointTargetVelocity(handlePads[3], v)

def irParaL(v):
    # V positivo direjta, -v esquerda
    sim.setJointTargetVelocity(handlePads[0], v)
    sim.setJointTargetVelocity(handlePads[1], v)
    sim.setJointTargetVelocity(handlePads[2], -v)
    sim.setJointTargetVelocity(handlePads[3], -v)

def irParaDD(v):
    # +v Diagnoal Cima, -v Diagnoal baixo
    sim.setJointTargetVelocity(handlePads[0], 0)
    sim.setJointTargetVelocity(handlePads[1], v)
    sim.setJointTargetVelocity(handlePads[2], 0)
    sim.setJointTargetVelocity(handlePads[3], -v)

def irParaDE(v):
    # +v Diagnoal Cima, -v Diagnoal baixo
    sim.setJointTargetVelocity(handlePads[0], -v)
    sim.setJointTargetVelocity(handlePads[1], 0)
    sim.setJointTargetVelocity(handlePads[2], v)
    sim.setJointTargetVelocity(handlePads[3], 0)

def girarOmni(v):
    # +v gira sentido horario, v = 0 para o robo, -v gira sentido anti horario
    sim.setJointTargetVelocity(handlePads[0], v)
    sim.setJointTargetVelocity(handlePads[1], v)
    sim.setJointTargetVelocity(handlePads[2], v)
    sim.setJointTargetVelocity(handlePads[3], v)
    
# Controlar o UR5
def girarBaseUr5(anguloGraus):
    rad = np.radians(anguloGraus)
    sim.setJointTargetPosition(handleJointUR5[0], rad)

# Calcular o Angulo pelo Euller
def calcularRotacao(alpha, beta, gamma):
    # Quando alpha e beta são diferentes de 0
    
    # Casos fixos
    if (alpha, beta, gamma) == (0, 90, 180):
        return 0, (0 * (np.pi / 180))
    elif (alpha, beta, gamma) == (-90, 0, -90):
        return 90, (90 * (np.pi / 180))
    elif (alpha, beta, gamma) == (0, -90, 0):
        return 180, (180 * (np.pi / 180))
    elif (alpha, beta, gamma) == (90, 0, 90):
        return 270, (270 * (np.pi / 180))
    
    # Casos restantes:
    if alpha == -90 and gamma == -90 and beta > 0:
        return 90 - beta, ((90 - beta) * (np.pi / 180))
    elif alpha == -90 and gamma == -90 and beta < 0:
        return 90 + (beta * -1), ((90 + (beta * -1)) * (np.pi / 180))
    elif alpha == 90 and gamma == 90 and beta < 0:
        return 180 + (90 - (beta * -1)), ((180 + (90 - (beta * -1))) * (np.pi / 180))
    elif alpha == 90 and gamma == 90 and beta > 0:
        return 270 + beta, ((270 + beta) * (np.pi / 180))
    
    # Quando alpha e beta são 0
    
    if (alpha, beta, gamma) == (0, 0, 0):
        return 0, (0 * (np.pi / 180))
    elif (alpha, beta, gamma) == (0, 0, 90):
        return 90, (90 * (np.pi / 180))
    elif (alpha, beta, gamma) == (0, 0, -180) or (alpha, beta, gamma) == (0, 0, 180):
        return 180, (180 * (np.pi / 180))
    elif (alpha, beta, gamma) == (0, 0, -90):
        return 270, (270 * (np.pi / 180))
    
    if alpha == 0 and beta == -0 and gamma > 0 and gamma < 180:
        return gamma, (gamma * (np.pi / 180))
    elif alpha == 0 and beta == 0 and gamma < 0:
        return 180 + (180 - (gamma * -1)), ((180 + (180 - (gamma * -1))) * (np.pi / 180))
    
    return -1, -1 

def obterOrientacao(objeto):
    orientacao = np.array(sim.getObjectOrientation(objeto, -1))
    orientacao = orientacao * 180/np.pi
    orientacao = np.around(orientacao, decimals=0)
    ang, rad = calcularRotacao(orientacao[0], orientacao[1], orientacao[2])
    return ang, rad

def executarIK():
    # Tenta resolver a IK com o grupo não amortecido (mais rápido e preciso)
    res, *_ = simIK.handleGroup(ikEnv, ikGroup_undamped, {'syncWorlds': True})
    
    if res != simIK.result_success:
        simIK.handleGroup(ikEnv, ikGroup_damped, {'syncWorlds': True})
        print("Aviso: Solucionador IK não amortecido falhou. Usando o amortecido para estabilidade.")

def moverTargetPara(x, y, z):
    sim.setObjectPosition(target, -1, [x, y, z])
    executarIK()

# Teste
conectar()
obterHandles()
configurarIK()

moverTargetPara(-0.9, 0.1, 1)